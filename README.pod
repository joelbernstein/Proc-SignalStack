=head1 NAME

Proc::SignalStack - Stacked signal handlers

=head1 SYNOPSIS

    use Proc::SignalStack;
    my $ss = Proc::SignalStack->new;
    $ss->add(INT  => \&handle_sigint1);
    $ss->add(INT  => \&handle_sigint2);
    $ss->add(ALRM => \&handle_timeout);
    $ss->install; # set these handlers active, saving any signals
    # ... do stuff with signals ...
    $ss->uninstall;             # deactivate our signal handlers, replace originals
    # ... do some other stuff with your own signal handlers
    $ss->install;               # reactivate our signal stack
    # ... do stuff with signals ...
    $ss->uninstall_permanently; # deactivate and clear signal handlers, replace originals

=head1 DESCRIPTION

This module provides a mechanism for stacked signal handlers. That means you can install multiple handlers
for any signal (even user-defined signal names - see L<perlipc>#Signals).

Perl's standard C<%SIG> signal-handling framework does not provide for multiple pieces of code to be 
informed that a signal event is raised - the purpose of this module is to provide this functionality.

Signals may be stacked, installed, and uninstalled such that any signals installed previously are replaced.
That is to say, for each signal you configure in the signal stack, if a handler for that signal is already
installed when the signal stack object is installed, the existing signal handler will be stored in order to 
replace it when the signal stack is uninstalled - it will NOT be added to the signal stack.

=head1 CONSTRUCTOR

=head2 new
    
    my $ss = Proc::SignalStack->new;
    my $ss_with_signals = Proc::SignalStack->new([ {USR1=>\&foo}, {USR1=>\&bar} ]);
    my $mortal_ss = Proc::SignalStack->new([], mortal=>1); # Proc::SignalStack::Mortal

Constructs a C<Proc::SignalStack> or C<Proc::SignalStack::Mortal> object. 

The first argument may be an C<ARRAY>ref of C<HASH>refs (AoH) of C<{SIGNAL=>\&handler}>.

An optional C<mortal=>1> may be specified to denote whether to build a mortal object
which uninstalls itself when it goes out of scope. See L<Proc::SignalStack::Mortal|Proc::SignalStack::Mortal>.

=head1 METHODS

=head2 add

    $ss->add( SIGNAL => \&handler );

Store the specified handler subroutine into the signal stack for signal SIGNAL.

=head2 install

    $ss->install;

Install the signal stack's sighandlers, saving any existing handlers to be restored later.

=head2 signals

    my $sig_counts = $ss->signals;
    my $USR1_count = $sig_counts->{USR1};

Returns a C<HASH>ref mapping signal names to the number of stacked handlers for them.

=head2 uninstall

    $ss->uninstall;

Uninstalls the handlers configured in the signal handler object, replacing any handlers
set previously, before installation. The handlers remain configured in the object and
can be reinstalled at any time.

=head2 uninstall_permanently

    $ss->uninstall_permanently;

Uninstalls the handlers configured in the signal handler object, replacing any handlers
set previously, before installation. The handlers are deleted from the object and can 
not be reinstalled.

=head1 SEE ALSO

L<perlipc|perlipc>
L<sigtrap|sigtrap>
L<Proc::SignalStack::Mortal|Proc::SignalStack::Mortal>

=head1 LICENSE

This module is available under the same terms as Perl itself.

=head1 AUTHOR

Joel Bernstein C<<rataxis@cpan.org>>.

=head1 COPYRIGHT

(C) Copyright Joel Bernstein 2007

=cut
